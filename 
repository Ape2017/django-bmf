diff --git a/djangobmf/conf.py b/djangobmf/conf.py
index 33d7ab4..131f252 100755
--- a/djangobmf/conf.py
+++ b/djangobmf/conf.py
@@ -133,6 +133,12 @@ class Settings(object):
         return getattr(djsettings, 'BMF_CONTRIB_TRANSACTIONITEM')
 
     @property
+    def CONTRIB_WAREHOUSE(self):  # noqa
+        if not hasattr(djsettings, 'BMF_CONTRIB_WAREHOUSE'):
+            setattr(djsettings, 'BMF_CONTRIB_WAREHOUSE', 'djangobmf_location.Warehouse')
+        return getattr(djsettings, 'BMF_CONTRIB_WAREHOUSE')
+
+    @property
     def CONTRIB_LOCATION(self):  # noqa
         if not hasattr(djsettings, 'BMF_CONTRIB_LOCATION'):
             setattr(djsettings, 'BMF_CONTRIB_LOCATION', 'djangobmf_location.Location')
@@ -228,6 +234,7 @@ class Settings(object):
             'CONTRIB_TIMESHEET',
             'CONTRIB_TRANSACTION',
             'CONTRIB_TRANSACTIONITEM',
+            'CONTRIB_WAREHOUSE',
             'CONTRIB_LOCATION',
             'CONTRIB_STOCK',
         ]:
diff --git a/djangobmf/contrib/location/bmf_module.py b/djangobmf/contrib/location/bmf_module.py
index 29c8867..be74c65 100755
--- a/djangobmf/contrib/location/bmf_module.py
+++ b/djangobmf/contrib/location/bmf_module.py
@@ -10,10 +10,17 @@ from djangobmf.sites import ViewMixin
 from djangobmf.sites import register
 
 from .categories import LocationCategory
+from .models import Warehouse
 from .models import Location
 
 
 @register
+class WarehouseModule(Module):
+    model = Warehouse
+    default = True
+
+
+@register
 class LocationModule(Module):
     model = Location
     default = True
@@ -21,23 +28,13 @@ class LocationModule(Module):
 
 @register(category=LocationCategory)
 class Warehouses(ViewMixin):
-    model = Location
+    model = Warehouse
     slug = 'warehouse'
     name = _("Warehouses")
 
-    def filter_queryset(self, request, queryset, view):
-        return queryset.filter(
-            is_warehouse=True,
-        )
-
 
 @register(category=LocationCategory)
 class Locations(ViewMixin):
     model = Location
     slug = 'location'
     name = _("Locations")
-
-    def filter_queryset(self, request, queryset, view):
-        return queryset.filter(
-            is_warehouse=False,
-        )
diff --git a/djangobmf/contrib/location/migrations/0001_initial.py b/djangobmf/contrib/location/migrations/0001_initial.py
index a9cd557..b313904 100644
--- a/djangobmf/contrib/location/migrations/0001_initial.py
+++ b/djangobmf/contrib/location/migrations/0001_initial.py
@@ -1,5 +1,5 @@
 # -*- coding: utf-8 -*-
-# Generated by Django 1.9.6 on 2016-06-09 09:08
+# Generated by Django 1.9.6 on 2016-06-24 02:57
 from __future__ import unicode_literals
 
 from django.conf import settings
@@ -22,22 +22,44 @@ class Migration(migrations.Migration):
                 ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                 ('name', models.CharField(max_length=255, verbose_name='Name')),
                 ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
-                ('is_warehouse', models.BooleanField(default=False, verbose_name='Is warehouse')),
-                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                 ('modified', models.DateTimeField(auto_now=True, null=True, verbose_name='Modified')),
                 ('created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created')),
                 ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                 ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
-                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child', to=settings.BMF_CONTRIB_LOCATION)),
-                ('parents', models.ManyToManyField(editable=False, related_name='children', to=settings.BMF_CONTRIB_LOCATION)),
             ],
             options={
-                'verbose_name': 'Location',
                 'abstract': False,
+                'verbose_name_plural': 'Locations',
                 'swappable': 'BMF_CONTRIB_LOCATION',
+                'ordering': ['name'],
                 'permissions': (('can_manage', 'Can manage all locations'),),
-                'verbose_name_plural': 'Locations',
+                'verbose_name': 'Location',
+            },
+        ),
+        migrations.CreateModel(
+            name='Warehouse',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=255, verbose_name='Name')),
+                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
+                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
+                ('modified', models.DateTimeField(auto_now=True, null=True, verbose_name='Modified')),
+                ('created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created')),
+                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
+                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
+            ],
+            options={
+                'abstract': False,
+                'verbose_name_plural': 'Warehouses',
+                'swappable': 'BMF_CONTRIB_WAREHOUSE',
                 'ordering': ['name'],
+                'permissions': (('can_manage', 'Can manage all locations'),),
+                'verbose_name': 'Warehouse',
             },
         ),
+        migrations.AddField(
+            model_name='location',
+            name='warehouse',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='warehouse_locations', to=settings.BMF_CONTRIB_WAREHOUSE),
+        ),
     ]
diff --git a/djangobmf/contrib/location/models.py b/djangobmf/contrib/location/models.py
index 5fefc29..d387f58 100755
--- a/djangobmf/contrib/location/models.py
+++ b/djangobmf/contrib/location/models.py
@@ -3,32 +3,56 @@
 
 from __future__ import unicode_literals
 
+
 from django.db import models
 from django.utils.encoding import python_2_unicode_compatible
 from django.utils.translation import ugettext_lazy as _
 
+from djangobmf.conf import settings as bmfsettings
 from djangobmf.models import BMFModel
 
 from .serializers import LocationSerializer
 
 
 @python_2_unicode_compatible
+class AbstractWarehouse(BMFModel):
+    """
+    """
+    name = models.CharField(_("Name"), max_length=255, null=False, blank=False, )
+    description = models.TextField(_("Description"), null=True, blank=True, )
+
+    is_active = models.BooleanField(_("Is active"), null=False, blank=False, default=True)
+
+    class Meta(BMFModel.Meta):  # only needed for abstract models
+        verbose_name = _('Warehouse')
+        verbose_name_plural = _('Warehouses')
+        ordering = ['name']
+        abstract = True
+        permissions = (
+            ('can_manage', 'Can manage all locations'),
+        )
+        swappable = "BMF_CONTRIB_WAREHOUSE"
+
+    class BMFMeta:
+        search_fields = ['name']
+        has_logging = False
+        serializer = LocationSerializer
+
+    def __str__(self):
+        return self.name
+
+
+@python_2_unicode_compatible
 class AbstractLocation(BMFModel):
     """
     """
     name = models.CharField(_("Name"), max_length=255, null=False, blank=False, )
     description = models.TextField(_("Description"), null=True, blank=True, )
-    is_warehouse = models.BooleanField(_("Is warehouse"), null=False, blank=False, default=False)
 
-    parent = models.ForeignKey(
-        'self', null=True, blank=True, related_name='child',
+    warehouse = models.ForeignKey(
+        bmfsettings.CONTRIB_WAREHOUSE, null=False, blank=False, related_name='warehouse_locations',
         on_delete=models.CASCADE,
     )
-    parents = models.ManyToManyField(
-        'self', related_name='children', editable=False, symmetrical=False,
-    )
-
-    is_active = models.BooleanField(_("Is active"), null=False, blank=False, default=True)
 
     class Meta(BMFModel.Meta):  # only needed for abstract models
         verbose_name = _('Location')
@@ -49,5 +73,9 @@ class AbstractLocation(BMFModel):
         return self.name
 
 
+class Warehouse(AbstractWarehouse):
+    pass
+
+
 class Location(AbstractLocation):
     pass
diff --git a/djangobmf/contrib/location/serializers.py b/djangobmf/contrib/location/serializers.py
index d3f679d..d97b5e3 100755
--- a/djangobmf/contrib/location/serializers.py
+++ b/djangobmf/contrib/location/serializers.py
@@ -5,11 +5,22 @@ from __future__ import unicode_literals
 
 from djangobmf.serializers import ModuleSerializer
 
+from rest_framework import serializers
+
+
+class WarehouseSerializer(ModuleSerializer):
+
+    class Meta:
+        fields = (
+            'name',
+        )
+
 
 class LocationSerializer(ModuleSerializer):
+    warehouse_name = serializers.ReadOnlyField(source='warehouse.name')
 
     class Meta:
         fields = (
             'name',
-            'parent',
+            'warehouse_name',
         )
diff --git a/djangobmf/contrib/location/templates/djangobmf_location/location_bmfdetail.html b/djangobmf/contrib/location/templates/djangobmf_location/location_bmfdetail.html
index 3db05a2..6e44844 100644
--- a/djangobmf/contrib/location/templates/djangobmf_location/location_bmfdetail.html
+++ b/djangobmf/contrib/location/templates/djangobmf_location/location_bmfdetail.html
@@ -1,5 +1,5 @@
 {% load i18n %}{% spaceless %}
-<h1>{% trans "Location" %}: {{ object.name }} <small>{{ object.is_warehouse }}</small></h1>
+<h1>{% trans "Location" %}: {{ object.name }}</h1>
 {% if object.parent %}
 <ol class="breadcrumb">
     {% for parent in object.parents.all %}
@@ -7,5 +7,5 @@
     {% endfor %}
 </ol>
 {% endif %}
-{% trans "Description" %}: {{ object.descript }}
+{% trans "Description" %}: {{ object.description }}
 {% endspaceless %}
diff --git a/djangobmf/contrib/location/templates/djangobmf_location/location_bmflist.html b/djangobmf/contrib/location/templates/djangobmf_location/location_bmflist.html
index d2e48fb..5ccffbf 100644
--- a/djangobmf/contrib/location/templates/djangobmf_location/location_bmflist.html
+++ b/djangobmf/contrib/location/templates/djangobmf_location/location_bmflist.html
@@ -2,8 +2,8 @@
 <table class="table table-striped table-condensed table-hover">
     <thead>
         <tr>
-            <th width="60%">{% trans "Name" %}</th>
-            <th width="20%">{% trans "Description" %}</th>
+            <th width="50%">{% trans "Name" %}</th>
+            <th width="50%">{% trans "Warehouse" %}</th>
         </tr>
     </thead>
     <tbody>
@@ -11,9 +11,8 @@
         <tr ng-repeat="obj in data" ng-class="obj.parent ? '' : 'info'">
             <td>
                 <a bmf-detail="{{ obj.pk }}" href="#">{{ obj.name }}</a>
-                <small ng-if="obj.parent == null"><br>{% trans "Warehouse" %}</small>
             </td>
-            <td class="text-right">{{ obj.description }}</td>
+            <td>{{ obj.warehouse_name }}</td>
         </tr>
     {% endverbatim %}
     </tbody>
diff --git a/djangobmf/contrib/location/views.py b/djangobmf/contrib/location/views.py
deleted file mode 100755
index 60a2e07..0000000
--- a/djangobmf/contrib/location/views.py
+++ /dev/null
@@ -1,4 +0,0 @@
-#!/usr/bin/python
-# ex:set fileencoding=utf-8:
-
-# from __future__ import unicode_literals
diff --git a/djangobmf/contrib/stock/bmf_module.py b/djangobmf/contrib/stock/bmf_module.py
index b0f0dd6..27d4aea 100755
--- a/djangobmf/contrib/stock/bmf_module.py
+++ b/djangobmf/contrib/stock/bmf_module.py
@@ -12,21 +12,18 @@ from djangobmf.sites import register
 from .categories import StockCategory
 from .models import Stock
 from .models import StockProduct
-# from .permissions import StockPermission
-# from .views import StockDetailView
-# from .views import StockCloneView
+from .views import StockinCreateView
 
 
 @register
 class StockModule(Module):
     model = Stock
     default = True
-#    clone = StockCloneView
-#    detail = StockDetailView
+    create = StockinCreateView
 
 
 @register
-class QuotationProductModule(Module):
+class StockProductModule(Module):
     model = StockProduct
 
 
@@ -34,7 +31,33 @@ class QuotationProductModule(Module):
 class Stockin(ViewMixin):
     model = Stock
     slug = 'stockin'
-    name = _("Stock in")
+    name = _("Stock In")
+
+    def filter_queryset(self, request, queryset, view):
+        return queryset.filter(
+            completed=False,
+            employee=request.user.djangobmf.employee,
+        )
+
+
+@register(category=StockCategory)
+class Stockout(ViewMixin):
+    model = Stock
+    slug = 'stockout'
+    name = _("Stock Out")
+
+    def filter_queryset(self, request, queryset, view):
+        return queryset.filter(
+            completed=False,
+            employee=request.user.djangobmf.employee,
+        )
+
+
+@register(category=StockCategory)
+class Stock(ViewMixin):
+    model = Stock
+    slug = 'stock'
+    name = _("Stock")
 
     def filter_queryset(self, request, queryset, view):
         return queryset.filter(
diff --git a/djangobmf/contrib/stock/categories.py b/djangobmf/contrib/stock/categories.py
index 246aefc..a44b450 100755
--- a/djangobmf/contrib/stock/categories.py
+++ b/djangobmf/contrib/stock/categories.py
@@ -10,6 +10,6 @@ from djangobmf.sites import Category
 
 
 class StockCategory(Category):
-    name = _('Stocks')
+    name = _('Stock')
     slug = "stocks"
     dashboard = Warehouse
diff --git a/djangobmf/contrib/stock/forms.py b/djangobmf/contrib/stock/forms.py
index c1a5d73..c2dda06 100755
--- a/djangobmf/contrib/stock/forms.py
+++ b/djangobmf/contrib/stock/forms.py
@@ -10,6 +10,18 @@ from django.utils.translation import ugettext_lazy as _
 from .models import Stock
 
 
+class StockinCreateForm(ModelForm):
+    class Meta:
+        model = Stock
+        exclude = ['date', 'employee']
+
+
+class StockinUpdateForm(ModelForm):
+    class Meta:
+        model = Stock
+        exclude = ['date']
+
+
 class StockCloneForm(ModelForm):
     class Meta:
         model = Stock
diff --git a/djangobmf/contrib/stock/migrations/0001_initial.py b/djangobmf/contrib/stock/migrations/0001_initial.py
index fbbc279..5b625e6 100644
--- a/djangobmf/contrib/stock/migrations/0001_initial.py
+++ b/djangobmf/contrib/stock/migrations/0001_initial.py
@@ -1,5 +1,5 @@
 # -*- coding: utf-8 -*-
-# Generated by Django 1.9.6 on 2016-06-09 09:08
+# Generated by Django 1.9.6 on 2016-06-24 09:01
 from __future__ import unicode_literals
 
 from django.conf import settings
@@ -13,9 +13,9 @@ class Migration(migrations.Migration):
     initial = True
 
     dependencies = [
-        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
-        migrations.swappable_dependency(settings.BMF_CONTRIB_PRODUCT),
         migrations.swappable_dependency(settings.BMF_CONTRIB_LOCATION),
+        migrations.swappable_dependency(settings.BMF_CONTRIB_PRODUCT),
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
         migrations.swappable_dependency(settings.BMF_CONTRIB_EMPLOYEE),
     ]
 
@@ -28,18 +28,18 @@ class Migration(migrations.Migration):
                 ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                 ('date', models.DateField(null=True, verbose_name='Date')),
                 ('completed', models.BooleanField(default=False, editable=False, verbose_name='Completed')),
+                ('net', models.FloatField(blank=True, editable=False, null=True)),
                 ('modified', models.DateTimeField(auto_now=True, null=True, verbose_name='Modified')),
                 ('created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created')),
                 ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                 ('employee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.BMF_CONTRIB_EMPLOYEE)),
-                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.BMF_CONTRIB_LOCATION)),
                 ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
             ],
             options={
-                'verbose_name_plural': 'Stocks',
-                'ordering': ['bill_no'],
-                'verbose_name': 'Stock',
                 'abstract': False,
+                'verbose_name': 'Stock',
+                'ordering': ['bill_no'],
+                'verbose_name_plural': 'Stocks',
                 'swappable': 'BMF_CONTRIB_STOCK',
             },
         ),
@@ -48,14 +48,14 @@ class Migration(migrations.Migration):
             fields=[
                 ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                 ('price', djangobmf.fields.MoneyField(blank=True, default=None, verbose_name='Price')),
-                ('number', models.IntegerField(default=0, verbose_name='Number')),
+                ('amount', models.IntegerField(default=0, verbose_name='Amount')),
                 ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                 ('modified', models.DateTimeField(auto_now=True, null=True, verbose_name='Modified')),
                 ('created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created')),
                 ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                 ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.BMF_CONTRIB_LOCATION)),
                 ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
-                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='stock_products', to=settings.BMF_CONTRIB_PRODUCT)),
+                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='stockproduct_products', to=settings.BMF_CONTRIB_PRODUCT)),
                 ('stock', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stock_products', to=settings.BMF_CONTRIB_STOCK)),
             ],
             options={
diff --git a/djangobmf/contrib/stock/models.py b/djangobmf/contrib/stock/models.py
index d488848..1caf61e 100755
--- a/djangobmf/contrib/stock/models.py
+++ b/djangobmf/contrib/stock/models.py
@@ -7,8 +7,11 @@ from django.db import models
 from django.utils.encoding import python_2_unicode_compatible
 from django.utils.translation import ugettext_lazy as _
 
+from decimal import Decimal
+
 from djangobmf.conf import settings
 from djangobmf.models import BMFModel
+from djangobmf.fields import CurrencyField
 from djangobmf.fields import MoneyField
 
 from .serializers import StockSerializer
@@ -17,12 +20,19 @@ from .serializers import StockProductSerializer
 
 class StockManager(models.Manager):
     def get_queryset(self):
-        related = ['product']
+        related = ['employee']
         return super(StockManager, self).get_queryset() \
             .order_by('bill_no') \
             .select_related(*related)
 
 
+class StockProductManager(models.Manager):
+    def get_queryset(self):
+        related = ['product']
+        return super(StockProductManager, self).get_queryset() \
+            .select_related(*related)
+
+
 @python_2_unicode_compatible
 class AbstractStock(BMFModel):
     """
@@ -30,17 +40,32 @@ class AbstractStock(BMFModel):
 
     bill_no = models.CharField(_("Bill no"), max_length=20, null=False, blank=False)
     description = models.TextField(_("Description"), null=True, blank=True)
-    date = models.DateField(_("Date"), null=True, blank=False)
-
-    location = models.ForeignKey(settings.CONTRIB_LOCATION, null=True, blank=True, on_delete=models.CASCADE)
 
+    date = models.DateField(_("Date"), null=True, blank=False)
     employee = models.ForeignKey(
         settings.CONTRIB_EMPLOYEE, null=True, blank=True, on_delete=models.SET_NULL)
 
+    stock_type = models.TextField(_("Stock type"), null=True, blank=True, editable=False)
     completed = models.BooleanField(_("Completed"), default=False, editable=False)
 
     objects = StockManager()
 
+    net = models.FloatField(editable=False, blank=True, null=True)
+
+    def get_products(self):
+        if not hasattr(self, '_cache_products'):
+            self._cache_products = self.stock_products.all().select_related('product')
+        return self._cache_products
+
+    def calc_net(self):
+        val = Decimal(0)
+        for item in self.get_products():
+            val += item.calc_net()
+        return val
+
+    def bmf_clean(self):
+        self.net = self.calc_net()
+
     class Meta(BMFModel.Meta):  # only needed for abstract models
         verbose_name = _('Stock')
         verbose_name_plural = _('Stocks')
@@ -49,6 +74,7 @@ class AbstractStock(BMFModel):
         swappable = "BMF_CONTRIB_STOCK"
 
     class BMFMeta:
+        observed_fields = ['net']
         serializer = StockSerializer
         has_files = True
         has_comments = True
@@ -56,11 +82,6 @@ class AbstractStock(BMFModel):
     def __str__(self):
         return '#%s' % (self.bill_no)
 
-    def clean(self):
-        # overwrite the project with the goals project
-        if self.goal:
-            self.project = self.goal.project
-
 
 class StockProduct(BMFModel):
     stock = models.ForeignKey(
@@ -70,18 +91,21 @@ class StockProduct(BMFModel):
 
     product = models.ForeignKey(
         settings.CONTRIB_PRODUCT, null=True, blank=True,
-        related_name="stock_products", on_delete=models.PROTECT,
+        related_name="stockproduct_products", on_delete=models.PROTECT,
+    )
+
+    price_currency = CurrencyField()
+    price_precision = models.PositiveSmallIntegerField(
+        default=0, blank=True, null=True, editable=False,
     )
     price = MoneyField(_("Price"), blank=False)
-    number = models.IntegerField(_("Number"), blank=False, default=0)
+    amount = models.IntegerField(_("Amount"), blank=False, default=0)
 
     location = models.ForeignKey(settings.CONTRIB_LOCATION, null=True, blank=True, on_delete=models.CASCADE)
 
     description = models.TextField(_("Description"), null=True, blank=True)
 
-    class BMFMeta:
-        only_related = True
-        serializer = StockProductSerializer
+    objects = StockProductManager()
 
     def calc_all(self):
         if hasattr(self, '_calcs'):
@@ -89,6 +113,13 @@ class StockProduct(BMFModel):
         self._calcs = self.product.calc_tax(self.amount, self.price)
         return self._calcs
 
+    def calc_net(self):
+        return self.calc_all()[0]
+
+    class BMFMeta:
+        only_related = True
+        serializer = StockProductSerializer
+
 
 class Stock(AbstractStock):
     pass
diff --git a/djangobmf/contrib/stock/serializers.py b/djangobmf/contrib/stock/serializers.py
index a1cdbb7..1fc4252 100755
--- a/djangobmf/contrib/stock/serializers.py
+++ b/djangobmf/contrib/stock/serializers.py
@@ -7,6 +7,8 @@ from django.utils.formats import date_format
 
 from djangobmf.serializers import ModuleSerializer
 
+from rest_framework import serializers
+
 
 class StockSerializer(ModuleSerializer):
     class Meta:
@@ -19,8 +21,13 @@ class StockSerializer(ModuleSerializer):
 
 
 class StockProductSerializer(ModuleSerializer):
+    product_name = serializers.ReadOnlyField(source='product.name')
+    location_name = serializers.ReadOnlyField(source='location.name')
 
     class Meta:
         fields = (
+            'product_name',
             'price',
+            'amount',
+            'location_name',
         )
diff --git a/djangobmf/contrib/stock/views.py1 b/djangobmf/contrib/stock/views.py1
deleted file mode 100755
index 4f958f8..0000000
--- a/djangobmf/contrib/stock/views.py1
+++ /dev/null
@@ -1,56 +0,0 @@
-#!/usr/bin/python
-# ex:set fileencoding=utf-8:
-
-from __future__ import unicode_literals
-
-from djangobmf.views import ModuleCloneView
-from djangobmf.views import ModuleDetail
-
-from .forms import StockCloneForm
-
-
-class GoalCloneView(ModuleCloneView):
-    form_class = GoalCloneForm
-
-    def clone_object(self, formdata, instance):
-        instance.completed = False
-
-    def clone_related_objects(self, formdata, old_object, new_object):
-        if formdata['copy_tasks']:
-            for task in old_object.task_set.all():
-                task.pk = None
-                task.goal = new_object
-                task.project = new_object.project
-                if formdata['clear_employee']:
-                    task.employee = None
-                task.due_date = None
-                task.completed = False
-                task.work_date = None
-                task.seconds_on = 0
-                setattr(
-                    task,
-                    task._bmfmeta.workflow_field_name,
-                    task._bmfmeta.workflow.default
-                )
-                task.save()
-
-
-class GoalDetailView(ModuleDetail):
-    def get_context_data(self, **kwargs):
-        tasks = {
-            'open': [],
-            'hold': [],
-            'done': [],
-        }
-        for task in self.object.task_set.all():
-            if task.state in ["open", "started", "new"]:
-                tasks["open"].append(task)
-            elif task.state in ["hold", "review", "todo"]:
-                tasks["hold"].append(task)
-            else:
-                tasks["done"].append(task)
-
-        kwargs.update({
-            'tasks': tasks,
-        })
-        return super(GoalDetailView, self).get_context_data(**kwargs)
diff --git a/djangobmf/contrib/stock/workflows.py1 b/djangobmf/contrib/stock/workflows.py1
deleted file mode 100755
index 209167a..0000000
--- a/djangobmf/contrib/stock/workflows.py1
+++ /dev/null
@@ -1,92 +0,0 @@
-#!/usr/bin/python
-# ex:set fileencoding=utf-8:
-
-from __future__ import unicode_literals
-
-from django.apps import apps
-from django.utils.translation import ugettext_lazy as _
-
-from djangobmf.conf import settings
-from djangobmf.workflow import Workflow, State, Transition
-
-
-def submit_condition(object, user):
-    if getattr(object, 'employee_id', False) and object.employee_id != user.pk:  # TODO: untested
-        return False
-    return True
-
-
-def finish_condition(object, user):
-    return True
-
-
-class StockWorkflow(Workflow):
-
-    class States:
-        draft = State(_(u"Draft"), True, delete=False)
-        submit = State(_(u"Submit"), update=False, delete=False)
-        cancelled = State(_(u"Cancelled"), update=False, delete=True)
-        finished = State(_(u"Finished"), update=False, delete=False)
-
-    class Transitions:
-        submit = Transition(
-            _("Submit on this bill"),
-            ["draft"],
-            "started",
-            condition=submit_condition,
-        )
-        finish = Transition(
-            _("Finish this bill"),
-            ["submit"],
-            "finished",
-            condition=finish_condition,
-        )
-        cancel = Transition(
-            _("Cancel this bill"),
-            ('submit'),
-            'cancelled',
-            condition=finish_condition,
-        )
-
-    def start(self):
-        self.instance.employee = self.user.djangobmf.employee
-
-        if self.instance.project:
-            project = self.instance.project
-        elif self.instance.goal:
-            project = self.instance.goal.project
-        else:
-            project = None
-
-        timesheet = apps.get_model(settings.CONTRIB_TIMESHEET)
-        if timesheet is not None:
-            obj = timesheet(
-                task=self.instance,
-                employee=self.user.djangobmf.employee,
-                auto=True,
-                project=project,
-                summary=self.instance.summary
-            )
-            obj.save()
-
-    def stop(self):
-        if not self.instance.in_charge and self.instance.employee:
-            self.instance.in_charge = self.instance.employee
-
-        timesheet = apps.get_model(settings.CONTRIB_TIMESHEET)
-        if timesheet is not None:
-            for obj in timesheet.objects.filter(
-                task=self.instance,
-                employee__in=[self.instance.in_charge, self.user.djangobmf.employee],
-                end=None,
-                auto=True,
-            ):
-                obj.state.transition('finish', self.user)
-
-    def finish(self):
-        self.stop()
-        self.instance.due_date = None
-        self.instance.completed = True
-
-    def cancel(self):
-        self.finish()
