############
Installation
############

This document assumes you are familiar with Python and Django. It should
outline the steps necessary for you to follow the tutorial.

************
Requirements
************

* `Python`_ 2.7, or 3.4
* `Django`_ 1.8
* `celery`_ (optional)
* An installed and working instance of one of the databases listed in the `Databases`_ section.

.. note:: When installing the django BMF using pip all requirements are installed automatically.

.. _Python: http://www.python.org
.. _Django: http://www.djangoproject.com
.. _celery: http://www.celeryproject.org/

Recommended
===========

These packages are not *required*, but they provide useful functionality with
minimal additional configuration and are well-proven.

************************************
Installing using docker-compose
************************************

You can deploy django BMF in a production-mimicing development stack using
`docker-compose`_.

.. code-block:: bash

  #!/bin/sh
  docker-compose up

This command installs and runs `PostgreSQL`_, a web and a worker instance of django-bmf,
reddis, elasticsearch and the celery monitoring tool flower, each inside their own
docker container.


************************************
Installing in a virtualenv using tox
************************************

Installing inside a `virtualenv`_ is the preferred way to install any Django installation. This approach should work on
any platform where python and `tox_` are installed:

.. code-block:: bash

  #!/bin/sh
  tox -e develop


************************************
Installing in a virtualenv using pip
************************************

Installing inside a `virtualenv`_ is the preferred way to install any Django installation. This should work on
any platform where python in installed. The first step is to create the virtualenv:

.. code-block:: bash

  #!/bin/sh
  sudo pip install --upgrade virtualenv
  virtualenv --distribute --no-site-packages env

You can switch to your virtualenv at the command line by typing:

.. code-block:: bash

  source env/bin/activate
  
Next, you can install packages one at a time using `pip`_, but we recommend using a `requirements.txt`_ file. The
following is an example requirements.txt file that can be used with pip to install django BMF and its dependencies:

::

    # Bare minimum
    django-bmf

    
for Postgresql you would also add:

::

    psycopg2==2.5
    
and install libpq-dev (on Debian-based distro)

for MySQL you would also add:

::

    mysql-python==1.2.4

and install libmysqlclient-dev (on Debian-based distro)

.. _virtualenv: http://www.virtualenv.org
.. _fig: http://www.fig.sh
.. _docker-compose: https://docs.docker.com/compose/
.. _pip: http://www.pip-installer.org
.. _tox: http://tox.readthedocs.org/en/latest/
.. _requirements.txt: http://www.pip-installer.org/en/latest/cookbook.html#requirements-files

*********
Databases
*********

We recommend using `PostgreSQL`_ or `MySQL`_ with django BMF. Installing and
maintaining database systems is outside the scope of this documentation, but
is very well documented on the systems' respective websites.

To use django BMF efficiently, we recommend:

* Creating a separate set of credentials for django BMF.
* Creating a separate database for django BMF to use.

.. _PostgreSQL: http://www.postgresql.org/
.. _MySQL: http://www.mysql.com


***********************
Configuration and setup
***********************

Open the ``settings.py`` file and add the following apps to your ``INSTALLED_APPS``:

.. code-block:: python

    'djangobmf',
    'sekizai',
    'rest_framework',
    'celery',  # optional

And if you want to add the ERP included in the Framework you should also include:

.. code-block:: python

    'djangobmf.contrib.accounting',
    'djangobmf.contrib.address',
    'djangobmf.contrib.customer',
    'djangobmf.contrib.employee',
    'djangobmf.contrib.invoice',
    'djangobmf.contrib.position',
    'djangobmf.contrib.product',
    'djangobmf.contrib.project',
    'djangobmf.contrib.quotation',
    'djangobmf.contrib.task',
    'djangobmf.contrib.taxing',
    'djangobmf.contrib.team',
    'djangobmf.contrib.timesheet',
    'djangobmf.contrib.location',
    'djangobmf.contrib.stock',
    'djangobmf.currency.EUR',
    'djangobmf.currency.USD',

You also need to update your ``urls.py`` with:

.. code-block:: python

    from djangobmf import sites as djangobmf

and update your ``urlpattern`` with

.. code-block:: python

    url(r'^', include(djangobmf.site.urls)),

if you want to run the framework under the webservers root path or

.. code-block:: python

    url(r'^my_prefix/', include(djangobmf.site.urls)),

to reach the framework via ``/my_prefix/``.

Django BMF has several settings, but you only need to define ``BMF_DOCUMENT_ROOT`` with
the path where the Framework is going to store your Documents and ``BMF_DOCKUMENT_URL``
with the url under which you're application serves the Documents.
